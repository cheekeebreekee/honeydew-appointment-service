Resources:
  AppointmentsDynamoDbTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: Retain
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "patientId"
          AttributeType: "S"
        - AttributeName: "appointmentId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "appointmentId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: patientIdIndex
          KeySchema:
            - AttributeName: patientId
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
      TableName: ${file(./sls/variables.yml):${self:provider.stage}.APPOINTMENTS_TABLE}

  # Define the SQS queue
  AppointmentCreatedDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: appointment-created-sqs-dlq

  AppointmentCreatedQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        maxReceiveCount: 3
        deadLetterTargetArn: !GetAtt AppointmentCreatedDeadLetterQueue.Arn

  AppointmentCreatedDeadLetterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sqs.amazonaws.com
            Action: SQS:SendMessage
            Resource: !GetAtt AppointmentCreatedQueue.Arn
      Queues:
        - Ref: AppointmentCreatedDeadLetterQueue

  AppointmentCanceledDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: appointment-cancelled-sqs-dlq

  AppointmentCanceledQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        maxReceiveCount: 3
        deadLetterTargetArn: !GetAtt AppointmentCanceledDeadLetterQueue.Arn

  AppointmentCanceledDeadLetterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sqs.amazonaws.com
            Action: SQS:SendMessage
            Resource: !GetAtt AppointmentCanceledQueue.Arn
      Queues:
        - Ref: AppointmentCanceledDeadLetterQueue

  # Define the event rule to filter for events
  AppointmentCreatedEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        account:
          - !Sub "${AWS::AccountId}"
        detail-type:
          - ${param:appoinmentCreatedEventDetailType}
      Targets:
        - Arn: !GetAtt AppointmentCreatedQueue.Arn
          Id: "SQSqueue"

  # Allow EventBridge to invoke SQS
  AppointmentCreatedEventBridgeToToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: SQS:SendMessage
            Resource: !GetAtt AppointmentCreatedQueue.Arn
      Queues:
        - Ref: AppointmentCreatedQueue

  AppointmentCanceledEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        account:
          - !Sub "${AWS::AccountId}"
        detail-type:
          - ${param:appoinmentCanceledEventDetailType}
      Targets:
        - Arn: !GetAtt AppointmentCanceledQueue.Arn
          Id: "SQSqueue"

  AppointmentCanceledEventBridgeToToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: SQS:SendMessage
            Resource: !GetAtt AppointmentCanceledQueue.Arn
      Queues:
        - Ref: AppointmentCanceledQueue
